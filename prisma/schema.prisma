// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  @@unique([provider, providerAccountId])
}

model Comment {
  id         String    @id @default(cuid())
  comment    String
  response   Response?
  responseId String?
  admin      User      @relation(fields: [userId], references: [id])
  userId     String
  document   Document? @relation(fields: [documentId], references: [id])
  documentId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Document {
  id             String        @id @default(cuid())
  name           String
  url            String
  status         Enum_Status
  comment        Comment[]
  typeDocument   TypeDocument? @relation(fields: [typeDocumentId], references: [id])
  typeDocumentId String?
  createdBy      User          @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Page {
  id        String   @id @default(cuid())
  name      String
  path      String   @unique
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id             String   @id @default(cuid())
  customName     String
  customImage    String
  location       String
  phone          String
  identification String
  user           User?    @relation(fields: [userId], references: [id])
  userId         String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Response {
  id        String   @id @default(cuid())
  response  String?
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        String    @id @default(cuid())
  name      Enum_Role
  users     User[]
  page      Page[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TypeDocument {
  id        String     @id @default(cuid())
  name      String
  format    String
  template  String
  documents Document[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model User {
  id            String     @id @default(cuid())
  email         String?    @unique
  name          String?
  image         String?
  role          Role?      @relation(fields: [roleId], references: [id])
  roleId        String?
  emailVerified DateTime?
  comments      Comment[]
  documents     Document[]
  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

enum Enum_Role {
  Admin
  Documenter
  Developer
}

enum Enum_Status {
  Accepted
  Pending
  Rejected
}
